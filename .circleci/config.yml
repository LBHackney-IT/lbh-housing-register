version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.2.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  cypress: cypress-io/cypress@3.3.1
  node: circleci/node@6.3.0
  sonarcloud: sonarsource/sonarcloud@2.0.0

executors:
  node-executor:
    docker:
      - image: cimg/node:20.17-browsers

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Anchors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

exclude_combinations:
  &exclude_combinations # exclude screen combinations that don't make sense for testing outside of the defined matrix.
  - browser: chrome
    height: 480
    width: 1536
  - browser: chrome
    height: 480
    width: 1366
  - browser: chrome
    height: 480
    width: 1024
  - browser: firefox
    height: 480
    width: 1536
  - browser: firefox
    height: 480
    width: 1366
  - browser: firefox
    height: 480
    width: 1024
  - browser: chrome
    height: 768
    width: 1536
  - browser: chrome
    height: 768
    width: 1366
  - browser: chrome
    height: 768
    width: 320
  - browser: firefox
    height: 768
    width: 1536
  - browser: firefox
    height: 768
    width: 1366
  - browser: firefox
    height: 768
    width: 320
  - browser: chrome
    height: 960
    width: 1024
  - browser: chrome
    height: 960
    width: 320
  - browser: firefox
    height: 960
    width: 1024
  - browser: firefox
    height: 960
    width: 320

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Jobs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
jobs:
  run-tests:
    executor: node-executor
    steps:
      - checkout
      - node/install-packages
      - cypress/install:
          package-manager: npm
          install-command: npm install
      - cypress/run-tests:
          cypress-command: npx cypress run --component --reporter junit
      - run:
          name: Run Jest Tests
          command: npm run test:ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: test_results
            JEST_JUNIT_ADD_FILE_ATTRIBUTE: 'true'
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: coverage
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .

  sonar-scan:
    executor: node-executor
    steps:
      - checkout
      - node/install-packages
      - sonarcloud/scan

  run-cypress-e2e:
    executor: node-executor
    parallelism: 8
    parameters:
      browser:
        type: string
        default: chrome
      height:
        type: integer
        default: 768
      width:
        type: integer
        default: 1366
    steps:
      - checkout
      - node/install-packages
      - cypress/install:
          package-manager: npm
          install-browsers: true
          install-command: npm install
          post-install: npm run build
      - run:
          name: Split E2E tests for parallel run
          command: |
            find cypress/e2e -type f -name "*.[jt]s" | sort | uniq > circleci_test_files.txt
            # Use time-based splitting for maximum efficiency. Cypress expects files to be separated with commas
            circleci tests split --split-by=timings circleci_test_files.txt | perl -pe 'chomp if eof' | tr '\n' ',' > circleci_test_slice.txt
            cat circleci_test_slice.txt
      - cypress/run-tests:
          cypress-command: npx cypress run --browser=<< parameters.browser >> --config viewportHeight=<< parameters.height >>,viewportWidth=<< parameters.width >> --reporter junit --reporter-options "mochaFile=cypress/results/results-[hash].xml" --spec "$(cat circleci_test_slice.txt)"
      - run:
          name: Fix up JUnit output
          command: node scripts/fix-junit-xml.js

      # Store the test results so CircleCI can provide insights and do parallel test splitting
      - store_test_results:
          path: cypress/results

      # We also store the test results as an artefact so we can download/access them when we need
      - store_artifacts:
          path: cypress/results

  build-deploy-development:
    executor: aws-cli/default
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_DEVELOPMENT
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - node/install-packages
      - run:
          name: deploy
          command: npm run build && sudo npm i -g serverless@^3 && sls deploy --stage development

  build-deploy-staging:
    executor: aws-cli/default
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_STAGING
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - node/install-packages
      - run:
          name: deploy
          command: npm run build && sudo npm i -g serverless@^3 && sls deploy --stage staging

  build-deploy-production:
    executor: aws-cli/default
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_PRODUCTION
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - node/install-packages
      - run:
          name: deploy
          command: npm run build && sudo npm i -g serverless@^3 && sls deploy --stage production

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Workflows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
workflows:
  version: 2
  continuous-delivery:
    jobs:
      - run-tests

      - run-cypress-e2e:
          matrix:
            parameters:
              browser: [chrome, firefox]
              # mobile, tablet, chromebook/desktop
              height: [480, 768, 960]
              # mobile, tablet, chromebook, desktop
              width: [320, 1024, 1366, 1536]
            exclude: *exclude_combinations

      - sonar-scan:
          context: SonarCloud
          requires:
            - run-tests

      - build-deploy-development:
          context:
            - api-assume-role-housing-development-context
            - housing-register-fe-build-context
          requires:
            - run-tests
            - run-cypress-e2e
          filters:
            branches:
              only: development

      - build-deploy-staging:
          context:
            - api-assume-role-housing-staging-context
            - housing-register-fe-build-context
          requires:
            - run-tests
            - run-cypress-e2e
          filters:
            branches:
              only: main

      - permit-deploy-production:
          type: approval
          requires:
            - build-deploy-staging
          filters:
            branches:
              only: main

      - build-deploy-production:
          context:
            - api-assume-role-housing-production-context
            - housing-register-fe-build-context
          requires:
            - permit-deploy-production
          filters:
            branches:
              only: main
