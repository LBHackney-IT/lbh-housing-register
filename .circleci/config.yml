version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  cypress: cypress-io/cypress@3.3.1
  sonarcloud: sonarsource/sonarcloud@2.0.0

executors:
  node-executor:
    docker:
      - image: cimg/node:16.20.2-browsers
  docker-python:
    docker:
      - image: circleci/python:3.7
  orb-executor:
    docker:
      - image: cimg/node:21.6.1-browsers
  cypress/base-16-18-1:
    docker:
      - image: cypress/base:16.18.1

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Jobs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
jobs:
  install-dependencies:
    executor: node-executor
    steps:
      - *attach_workspace
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
            - ./.next/cache
      - persist_to_workspace:
          root: *workspace_root
          paths: .

  sonar-scan:
    executor: orb-executor
    steps:
      - *attach_workspace
      - sonarcloud/scan

  build-deploy-development:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: deploy
          command: npm run build && sudo npm i -g serverless@^3 && sls deploy --stage development

  build-deploy-staging:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: deploy
          command: npm run build && sudo npm i -g serverless@^3 && sls deploy --stage staging

  build-deploy-production:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: deploy
          command: npm run build && sudo npm i -g serverless@^3 && sls deploy --stage production

  assume-role-development:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_DEVELOPMENT
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  assume-role-staging:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_STAGING
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  assume-role-production:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_PRODUCTION
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  install-and-persist:
    executor:
      name: cypress/default
      node-version: '16.18.1'
    steps:
      - cypress/install:
          install-command: npm install
          post-install: npm run build
          # working-directory: examples/angular-app
          cypress-cache-key: cypress-cache-{{ arch }}-{{ checksum "package.json" }}
          include-branch-in-node-cache-key: true
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .cache/Cypress
            # - project
  run-e2e-tests-in-chrome:
    docker:
      - image: cypress/browsers:node-16.18.1-chrome-110.0.5481.96-1-ff-109.0-edge-110.0.1587.41-1
    steps:
      - run: echo "This step assumes dependencies were installed using the cypress/install job"
      - attach_workspace:
          at: *workspace_root
      - cypress/run-tests:
          start-command: npm run start
          working-directory: *workspace_root
          # working-directory: examples/angular-app
          # wait-on: 'http://localhost:3000'
          cypress-command: 'npx cypress run --e2e --browser chrome'

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Workflows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
workflows:
  version: 2
  continuous-delivery:
    jobs:
      - install-dependencies
      - install-and-persist
      - run-e2e-tests-in-chrome:
          filters:
            branches:
              only: TS-1585-Housing-reg-view-only-Implement-new-view-only-group-in-the-app
          name: Run E2E Tests in Chrome
          requires:
            - install-and-persist
      # - cypress/install: # Use Cypress step to install and cache dependencies
      #     build: npm run build
      #     executor: cypress/base-16-14-2-slim
      # post-checkout:
      #   - run: cp .env.sample .env
      # Because we're using jest and cypress component, we'll use the cypress orb to run both tests.
      # - cypress/run:
      #     filters: *filters
      #     name: Standard Npm Example
      #     # working-directory: examples/npm-install
      #     cypress-cache-key: cypress-cache-{{ arch }}-{{ checksum "package.json" }}
      #     post-install: "npm run say-hello && npm run say-goodbye"
      - cypress/run:
          name: tests
          package-manager: npm
          cypress-command: npx cypress run --component --reporter cypress-circleci-reporter
          requires:
            - install-dependencies
          post-steps:
            - run:
                command: npm run test:ci
                environment:
                  JEST_JUNIT_OUTPUT_DIR: test_results
                  JEST_JUNIT_ADD_FILE_ATTRIBUTE: 'true'
            - store_test_results:
                path: test_results
            - store_artifacts:
                path: coverage
      - sonar-scan:
          context: SonarCloud
          requires:
            - tests
      - assume-role-development:
          context: api-assume-role-housing-development-context
          requires:
            - sonar-scan
          filters:
            branches:
              only: development
      - build-deploy-development:
          context: housing-register-fe-build-context
          requires:
            - assume-role-development
          filters:
            branches:
              only: development
      - cypress/run:
          name: cypress-e2e-chrome
          requires:
            - tests
          # attach-workspace: true
          # package-manager: npm
          install-command: npm install && echo "Cypress installed"
          post-install: npm run build
          # wait-on: 'http-get://127.0.0.1:3000/api/ping'
          start-command: npm run start
          install-browsers: true
          cypress-command: |
            npx wait-on@latest http-get://localhost:3000/api/ping
            npx cypress run --e2e --browser chrome --reporter cypress-circleci-reporter
          post-steps:
            - store_test_results:
                path: test_results
            - store_artifacts:
                path: cypress/videos
            - store_artifacts:
                path: cypress/screenshots
            - store_artifacts:
                path: cypress/reports
          filters:
            branches:
              only: TS-1585-Housing-reg-view-only-Implement-new-view-only-group-in-the-app
      # - cypress/run:
      #     name: cypress-e2e-firefox
      #     requires:
      #       - build-deploy-development
      #     package-manager: npm
      #     install-browsers: true
      #     cypress-command: npx cypress run --e2e --browser firefox --reporter cypress-circleci-reporter
      #     post-steps:
      #       - store_test_results:
      #           path: test_results
      #       - store_artifacts:
      #           path: cypress/videos
      #       - store_artifacts:
      #           path: cypress/screenshots
      #       - store_artifacts:
      #           path: cypress/reports
      #     filters:
      #       branches:
      #         only: development
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          requires:
            - tests
          filters:
            branches:
              only: main
      - build-deploy-staging:
          context: housing-register-fe-build-context
          requires:
            - assume-role-staging
          filters:
            branches:
              only: main
      - permit-deploy-production:
          type: approval
          requires:
            - build-deploy-staging
          filters:
            branches:
              only: main
      - assume-role-production:
          context: api-assume-role-housing-production-context
          requires:
            - permit-deploy-production
          filters:
            branches:
              only: main
      - build-deploy-production:
          context: housing-register-fe-build-context
          requires:
            - assume-role-production
          filters:
            branches:
              only: main
